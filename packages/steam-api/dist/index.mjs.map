{"version":3,"sources":["../src/steamApi.ts"],"sourcesContent":["import axios from 'axios';\nimport invariant from 'tiny-invariant';\nimport type {\n  SteamApiAppDetailsResponse,\n  SteamApiGetOwnedGamesResponse,\n} from './interfaces';\n\nimport logger from '@apple-si-gaming-db/logger';\n\ninterface SteamApiResponse {\n  [appid: string]: SteamApiAppDetailsResponse;\n}\n\nexport async function getSteamAppDetailsRequest(\n    steamAppId: number,\n): Promise<SteamApiAppDetailsResponse> {\n  try {\n    const response = await axios.get<SteamApiResponse>('https://store.steampowered.com/api/appdetails/', {\n      params: {\n        appids: steamAppId,\n      },\n      responseType: 'json',\n    });\n    invariant(response.status === 200, `Response status was not 200, response.status: ${response.status}`);\n    const steamApiResponse = response.data;\n    return steamApiResponse[String(steamAppId)];\n  } catch (err) {\n    if (err instanceof Error) {\n      logger.error('Error in getSteamAppDetailsRequest');\n      // throw new Error('Error in getSteamAppDetailsRequest', { cause: err });\n      throw err;\n    }\n    throw err;\n  }\n}\n\n/*\n * steamId is the steam users 64-bit id\n */\n\nexport async function getSteamPlayerOwnedGamesRequest(\n    steamUserId: string,\n): Promise<SteamApiGetOwnedGamesResponse['response']> {\n  try {\n    const apiKey = process.env.STEAM_API_KEY;\n    invariant(apiKey, 'No Steam API key found, check ENV vars');\n    const response = await axios.get<SteamApiGetOwnedGamesResponse>('https://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/', {\n      params: {\n        key: apiKey,\n        steamid: steamUserId,\n        format: 'json',\n      },\n      responseType: 'json',\n    });\n    invariant(response.status === 200, `Response status was not 200, response.status: ${response.status}`);\n    return response.data.response;\n  } catch (err) {\n    if (err instanceof Error) {\n      logger.error('Error in getSteamPlayerOwnedGamesRequest');\n      throw err;\n      // throw new Error('Error in getSteamPlayerOwnedGamesRequest', {\n      //   cause: err,\n      // });\n    }\n    throw err;\n  }\n}\n\ninterface SteamApiAppListResponse {\n  applist: {\n    apps: {\n      name: string;\n      appid: number;\n    }[]\n  }\n}\n\nexport async function getSteamAppListRequest(): Promise<SteamApiAppListResponse> {\n  try {\n    const response = await axios.get<SteamApiAppListResponse>(\n        'https://api.steampowered.com/ISteamApps/GetAppList/v2/', {\n          responseType: 'json',\n        });\n    invariant(response.status === 200, `Response status was not 200, response.status: ${response.status}`);\n    const steamApiResponse = response.data;\n    return steamApiResponse;\n  } catch (err) {\n    if (err instanceof Error) {\n      logger.error('Error in getSteamAppListRequest');\n      // throw new Error('Error in getSteamAppDetailsRequest', { cause: err });\n      throw err;\n    }\n    throw err;\n  }\n}\n"],"mappings":";AAAA,OAAO,WAAW;AAClB,OAAO,eAAe;AAMtB,OAAO,YAAY;AAMnB,eAAsB,0BAClB,YACmC;AACrC,MAAI;AACF,UAAM,WAAW,MAAM,MAAM,IAAsB,kDAAkD;AAAA,MACnG,QAAQ;AAAA,QACN,QAAQ;AAAA,MACV;AAAA,MACA,cAAc;AAAA,IAChB,CAAC;AACD,cAAU,SAAS,WAAW,KAAK,iDAAiD,SAAS,QAAQ;AACrG,UAAM,mBAAmB,SAAS;AAClC,WAAO,iBAAiB,OAAO,UAAU;AAAA,EAC3C,SAAS,KAAP;AACA,QAAI,eAAe,OAAO;AACxB,aAAO,MAAM,oCAAoC;AAEjD,YAAM;AAAA,IACR;AACA,UAAM;AAAA,EACR;AACF;AAMA,eAAsB,gCAClB,aACkD;AACpD,MAAI;AACF,UAAM,SAAS,QAAQ,IAAI;AAC3B,cAAU,QAAQ,wCAAwC;AAC1D,UAAM,WAAW,MAAM,MAAM,IAAmC,oEAAoE;AAAA,MAClI,QAAQ;AAAA,QACN,KAAK;AAAA,QACL,SAAS;AAAA,QACT,QAAQ;AAAA,MACV;AAAA,MACA,cAAc;AAAA,IAChB,CAAC;AACD,cAAU,SAAS,WAAW,KAAK,iDAAiD,SAAS,QAAQ;AACrG,WAAO,SAAS,KAAK;AAAA,EACvB,SAAS,KAAP;AACA,QAAI,eAAe,OAAO;AACxB,aAAO,MAAM,0CAA0C;AACvD,YAAM;AAAA,IAIR;AACA,UAAM;AAAA,EACR;AACF;AAWA,eAAsB,yBAA2D;AAC/E,MAAI;AACF,UAAM,WAAW,MAAM,MAAM;AAAA,MACzB;AAAA,MAA0D;AAAA,QACxD,cAAc;AAAA,MAChB;AAAA,IAAC;AACL,cAAU,SAAS,WAAW,KAAK,iDAAiD,SAAS,QAAQ;AACrG,UAAM,mBAAmB,SAAS;AAClC,WAAO;AAAA,EACT,SAAS,KAAP;AACA,QAAI,eAAe,OAAO;AACxB,aAAO,MAAM,iCAAiC;AAE9C,YAAM;AAAA,IACR;AACA,UAAM;AAAA,EACR;AACF;","names":[]}