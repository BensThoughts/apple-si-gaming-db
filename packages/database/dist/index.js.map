{"version":3,"sources":["../src/index.ts","../src/client.ts","../src/interfaces/index.ts","../src/utils/convert-steam-api-to-prisma.ts","../src/models/steamApp.ts","../src/models/performancePost.ts","../src/models/steamUser.ts"],"sourcesContent":["export * from './client';\nexport * from './interfaces';\nexport * from './utils';\nexport * from './models';\n","/* eslint-disable no-var */\nimport { PrismaClient } from '@prisma/client';\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\n\nexport const prisma = global.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') global.prisma = prisma;\n","export * from './PrismaSteamApp';\nexport * from './PrismaSteamUser';\nexport { Prisma } from '@prisma/client';\n","import type {\n  PrismaSteamApp,\n  PrismaSteamDemo,\n  PrismaSteamPackageGroup,\n  PrismaSteamPackageGroupSub,\n  PrismaSteamCategory,\n  PrismaSteamGenre,\n  PrismaSteamScreenshot,\n  PrismaSteamMovie,\n  PrismaSteamAchievement,\n} from '../interfaces';\n\nimport type {\n  SteamApiAppData,\n  SteamApiDemo,\n  SteamApiPackageGroup,\n  SteamApiPackageGroupSub,\n  SteamApiCategory,\n  SteamApiGenre,\n  SteamApiScreenshotData,\n  SteamApiMovieData,\n  SteamApiAchievement,\n} from '@apple-si-gaming-db/steam-api';\n\nexport function extractSteamApiDemos(\n    steamAppId: number,\n    demos: SteamApiDemo[],\n): PrismaSteamDemo[] {\n  return demos.map((demo) => {\n    return {\n      steamAppId,\n      demoAppId: demo.appid,\n      description: demo.description ? demo.description : null,\n    };\n  });\n}\n\nfunction extractSteamApiPackageGroups(\n    steamAppId: number,\n    packageGroups: SteamApiPackageGroup[],\n): PrismaSteamPackageGroup[] {\n  return packageGroups.map((packageGroup) => {\n    return {\n      steamAppId,\n      name: packageGroup.name,\n      title: valueExistsOrNull(packageGroup.title),\n      description: valueExistsOrNull(packageGroup.description),\n      selectionText: valueExistsOrNull(packageGroup.selection_text),\n      saveText: valueExistsOrNull(packageGroup.save_text),\n      displayType: String(valueExistsOrNull(packageGroup.display_type)),\n      isRecurringSubscription: valueExistsOrNull(packageGroup.is_recurring_subscription),\n      subs: packageGroup.subs ? extractSteamApiPackageGroupSubs(steamAppId, packageGroup.name, packageGroup.subs) : null,\n    };\n  });\n}\n\nfunction extractSteamApiPackageGroupSubs(\n    steamAppId: number,\n    packageGroupName: string,\n    packageGroupSubs: SteamApiPackageGroupSub[],\n): PrismaSteamPackageGroupSub[] {\n  return packageGroupSubs.map((packageGroupSub) => {\n    return {\n      steamAppId,\n      packageGroupName,\n      packageId: packageGroupSub.packageid,\n      percentSavingsText: valueExistsOrNull(packageGroupSub.percent_savings_text),\n      percentSavings: valueExistsOrNull(packageGroupSub.percent_savings),\n      optionText: valueExistsOrNull(packageGroupSub.option_text),\n      optionDescription: valueExistsOrNull(packageGroupSub.option_description),\n      canGetFreeLicense: valueExistsOrNull(packageGroupSub.can_get_free_license),\n      isFreeLicense: valueExistsOrNull(packageGroupSub.is_free_license),\n      priceInCentsWithDiscount: valueExistsOrNull(packageGroupSub.price_in_cents_with_discount),\n    };\n  });\n}\n\nfunction extractSteamApiCategories(categories: SteamApiCategory[]): PrismaSteamCategory[] {\n  return categories.map((category) => {\n    return {\n      categoryId: category.id,\n      description: category.description ? category.description : '',\n    };\n  });\n}\n\nfunction extractSteamApiGenres(genres: SteamApiGenre[]): PrismaSteamGenre[] {\n  return genres.map((genre) => {\n    return {\n      genreId: genre.id,\n      description: genre.description ? genre.description : '',\n    };\n  });\n}\n\nfunction extractSteamApiScreenshots(steamAppId: number, screenshots: SteamApiScreenshotData[]): PrismaSteamScreenshot[] {\n  return screenshots.map((screenshot) => {\n    return {\n      steamAppId,\n      screenshotId: screenshot.id,\n      pathThumbnail: valueExistsOrNull(screenshot.path_thumbnail),\n      pathFull: valueExistsOrNull(screenshot.path_full),\n    };\n  });\n}\n\n\n// TODO: Left out valueExistsOrNull because of potential complications with .['480]\nfunction extractSteamApiMovies(steamAppId: number, movies: SteamApiMovieData[]): PrismaSteamMovie[] {\n  return movies.map((movie) => {\n    return {\n      steamAppId,\n      movieId: movie.id,\n      name: valueExistsOrNull(movie.name),\n      thumbnail: valueExistsOrNull(movie.thumbnail),\n      webmFourEighty: movie.webm?.['480'] ? movie.webm['480'] : null,\n      webmMax: movie.webm?.max ? movie.webm.max : null,\n      mp4FourEighty: movie.mp4?.['480'] ? movie.mp4['480'] : null,\n      mp4Max: movie.mp4?.max ? movie.mp4.max : null,\n      highlight: movie.highlight ? movie.highlight : null,\n    };\n  });\n}\n\n\nfunction extractSteamApiAchievements(steamAppId: number, achievements: SteamApiAchievement[]): PrismaSteamAchievement[] {\n  return achievements.map((achievement) => {\n    return {\n      steamAppId,\n      name: achievement.name,\n      path: valueExistsOrNull(achievement.path),\n      highlighted: true,\n    };\n  });\n}\n\nfunction valueExistsOrNull<T>(v: T) {\n  if (v === null || v === undefined) {\n    return null;\n  }\n  return v;\n}\n\nexport function convertSteamApiDataToPrisma(app: SteamApiAppData): PrismaSteamApp {\n  return {\n    name: app.name,\n    steamAppId: app.steam_appid,\n    dataDownloadAttempted: true,\n    dataDownloadAttemptedAt: new Date(),\n    dataDownloaded: true,\n    dataDownloadedAt: new Date(),\n    type: valueExistsOrNull(app.type),\n    requiredAge: valueExistsOrNull(app.required_age) ? String(app.required_age) : null, // TODO: Look at\n    isFree: valueExistsOrNull(app.is_free),\n    controllerSupport: valueExistsOrNull(app.controller_support),\n    dlc: app.dlc ? app.dlc : [],\n    detailedDescription: valueExistsOrNull(app.detailed_description),\n    aboutTheGame: valueExistsOrNull(app.about_the_game),\n    shortDescription: valueExistsOrNull(app.short_description),\n    supportedLanguages: valueExistsOrNull(app.supported_languages),\n    reviews: valueExistsOrNull(app.reviews),\n    headerImage: valueExistsOrNull(app.header_image),\n    website: valueExistsOrNull(app.website),\n    pcRequirementsMinimum: valueExistsOrNull(app.pc_requirements?.minimum),\n    pcRequirementsRecommended: valueExistsOrNull(app.pc_requirements?.recommended),\n    macRequirementsMinimum: valueExistsOrNull(app.mac_requirements?.minimum),\n    macRequirementsRecommended: valueExistsOrNull(app.mac_requirements?.recommended),\n    linuxRequirementsMinimum: valueExistsOrNull(app.linux_requirements?.minimum),\n    linuxRequirementsRecommended: valueExistsOrNull(app.linux_requirements?.recommended),\n    legalNotice: valueExistsOrNull(app.legal_notice),\n    developers: app.developers ? app.developers : [],\n    publishers: app.publishers ? app.publishers : [],\n    demos: app.demos ? extractSteamApiDemos(app.steam_appid, app.demos) : null,\n    priceOverview: app.price_overview ? {\n      steamAppId: app.steam_appid,\n      currency: valueExistsOrNull(app.price_overview.currency),\n      initial: valueExistsOrNull(app.price_overview.initial),\n      final: valueExistsOrNull(app.price_overview.final),\n      discountPercent: valueExistsOrNull(app.price_overview.discount_percent),\n      initialFormatted: valueExistsOrNull(app.price_overview.initial_formatted),\n      finalFormatted: valueExistsOrNull(app.price_overview.final_formatted),\n    } : null,\n    packages: app.packages ? app.packages : [],\n    packageGroups: app.package_groups ? extractSteamApiPackageGroups(app.steam_appid, app.package_groups) : null,\n    platformWindows: valueExistsOrNull(app.platforms?.windows), // boolean\n    platformMac: valueExistsOrNull(app.platforms?.mac), // boolean\n    platformLinux: valueExistsOrNull(app.platforms?.linux), // boolean\n    metacriticScore: valueExistsOrNull(app.metacritic?.score),\n    metacriticUrl: valueExistsOrNull(app.metacritic?.url),\n    categories: app.categories ? extractSteamApiCategories(app.categories) : null,\n    genres: app.genres ? extractSteamApiGenres(app.genres) : null,\n    screenshots: app.screenshots ? extractSteamApiScreenshots(app.steam_appid, app.screenshots) : null,\n    movies: app.movies ? extractSteamApiMovies(app.steam_appid, app.movies) : null,\n    recommendationsTotal: valueExistsOrNull(app.recommendations?.total),\n    achievementsTotal: valueExistsOrNull(app.achievements?.total),\n    achievements: app.achievements?.highlighted ? extractSteamApiAchievements(app.steam_appid, app.achievements.highlighted) : null,\n    comingSoon: valueExistsOrNull(app.release_date?.coming_soon), // boolean\n    releaseDate: valueExistsOrNull(app.release_date?.date),\n    supportUrl: valueExistsOrNull(app.support_info?.url),\n    supportEmail: valueExistsOrNull(app.support_info?.email),\n    background: valueExistsOrNull(app.background),\n    backgroundRaw: valueExistsOrNull(app.background_raw),\n    contentDescriptorIds: app.content_descriptors?.ids ? app.content_descriptors.ids : [],\n    contentDescriptorNotes: valueExistsOrNull(app.content_descriptors?.notes),\n  };\n}\n","import type {\n  PrismaSteamDemo,\n  PrismaSteamPriceOverview,\n  PrismaSteamPackageGroupSub,\n  PrismaSteamCategory,\n  PrismaSteamGenre,\n  PrismaSteamScreenshot,\n  PrismaSteamMovie,\n  PrismaSteamAchievement,\n  PrismaSteamApp,\n} from '../interfaces';\nimport { prisma } from '../client';\nimport logger from '@apple-si-gaming-db/logger';\n\nfunction valueExistsOrNull<T>(v: T) {\n  if (v === null || v === undefined) {\n    return null;\n  }\n  return v;\n}\n\nexport async function updateSteamAppDownloadAttempted(\n    steamAppId: PrismaSteamApp['steamAppId'],\n    dataDownloadAttempted = true,\n) {\n  try {\n    await prisma.steamApp.update({\n      where: {\n        steamAppId,\n      },\n      data: {\n        dataDownloadAttempted,\n        dataDownloadAttemptedAt: new Date(),\n      },\n    });\n  } catch (err) {\n    if (err instanceof Error) {\n      logger.error('Error in updateSteamAppDownloadAttempted');\n      // const error = new Error('Error in updateSteamAppDownloadAttempted',{\n      //   cause: err,\n      // });\n      throw err;\n      // logError(err, appIdData);\n    } else {\n      throw err;\n    }\n  }\n}\n\nexport async function updateSteamApp(\n    prismaSteamAppData: PrismaSteamApp,\n) {\n  const {\n    steamAppId,\n    demos,\n    priceOverview,\n    packageGroups,\n    categories,\n    genres,\n    screenshots,\n    movies,\n    achievements,\n    ...prismaSteamApp\n  } = prismaSteamAppData;\n\n  try {\n    await prisma.steamApp.update({\n      where: {\n        steamAppId,\n      },\n      data: {\n        ...prismaSteamApp,\n        demos: connectOrCreateDemos(steamAppId, demos),\n        priceOverview: connectOrCreatePriceOverview(steamAppId, priceOverview),\n        categories: connectOrCreateCategories(categories),\n        genres: connectOrCreateGenres(genres),\n        screenshots: connectOrCreateScreenshots(steamAppId, screenshots),\n        movies: connectOrCreateMovies(steamAppId, movies),\n        achievements: connectOrCreateAchievements(steamAppId, achievements),\n      },\n    });\n  } catch (err) {\n    if (err instanceof Error) {\n      logger.error('Error at prisma.steamApp.update in updateSteamApp');\n      // const error = new Error('Error at prisma.steamApp.update in updateSteamApp', {\n      //   cause: err,\n      // });\n      throw err;\n      // logError(err, appIdData);\n    } else {\n      throw err;\n    }\n  }\n\n  if (packageGroups) {\n    for (let i = 0; i < packageGroups.length; i++) {\n      const packageGroup = packageGroups[i];\n\n      try {\n        await prisma.steamPackageGroup.upsert({\n          where: {\n            steamAppId_name: {\n              steamAppId,\n              name: packageGroup.name,\n            },\n          },\n          create: {\n            steamAppId,\n            name: packageGroup.name,\n            title: valueExistsOrNull(packageGroup.title),\n            description: valueExistsOrNull(packageGroup.description),\n            selectionText: valueExistsOrNull(packageGroup.selectionText),\n            saveText: valueExistsOrNull(packageGroup.saveText),\n            displayType: valueExistsOrNull(packageGroup.displayType),\n            isRecurringSubscription: valueExistsOrNull(packageGroup.isRecurringSubscription),\n            subs: connectOrCreatePackageGroupSubs(steamAppId, packageGroup.subs),\n          },\n          update: {\n            steamAppId,\n            name: packageGroup.name,\n            title: valueExistsOrNull(packageGroup.title),\n            description: valueExistsOrNull(packageGroup.description),\n            selectionText: valueExistsOrNull(packageGroup.selectionText),\n            saveText: valueExistsOrNull(packageGroup.saveText),\n            displayType: valueExistsOrNull(packageGroup.displayType),\n            isRecurringSubscription: valueExistsOrNull(packageGroup.isRecurringSubscription),\n            subs: connectOrCreatePackageGroupSubs(steamAppId, packageGroup.subs),\n          },\n        });\n      } catch (err) {\n        if (err instanceof Error) {\n          logger.error('Error at prisma.steamPackageGroup.upsert in updateSteamApp');\n          // const error = new Error('Error at prisma.steamPackageGroup.upsert in updateSteamApp', {\n          //   cause: err,\n          // });\n          throw err;\n          // logError(err, appIdData);\n        } else {\n          throw err;\n        }\n      }\n    }\n  }\n}\n\nfunction connectOrCreateDemos(\n    steamAppId: number,\n    demos: PrismaSteamDemo[] | null | undefined,\n) {\n  return demos ? {\n    connectOrCreate: demos.map((demo) => {\n      return {\n        where: {\n          steamAppId_demoAppId: {\n            steamAppId,\n            demoAppId: demo.demoAppId,\n          },\n        },\n        create: {\n          demoAppId: demo.demoAppId,\n          description: valueExistsOrNull(demo.description),\n        },\n      };\n    }),\n  } : undefined;\n}\n\nfunction connectOrCreatePriceOverview(\n    steamAppId: number,\n    priceOverview: PrismaSteamPriceOverview | null | undefined,\n) {\n  return priceOverview ? {\n    connectOrCreate: {\n      where: {\n        steamAppId,\n      },\n      create: {\n        currency: valueExistsOrNull(priceOverview.currency),\n        initial: valueExistsOrNull(priceOverview.initial),\n        final: valueExistsOrNull(priceOverview.final),\n        discountPercent: valueExistsOrNull(priceOverview.discountPercent),\n        initialFormatted: valueExistsOrNull(priceOverview.initialFormatted),\n        finalFormatted: valueExistsOrNull(priceOverview.finalFormatted),\n      },\n    },\n  } : undefined;\n}\n\nfunction connectOrCreatePackageGroupSubs(\n    steamAppId: number,\n    subs: PrismaSteamPackageGroupSub[] | null | undefined,\n) {\n  return subs ? {\n    connectOrCreate: subs.map((sub) => {\n      return {\n        where: {\n          steamAppId_packageGroupName_packageId: {\n            steamAppId,\n            packageGroupName: sub.packageGroupName,\n            packageId: sub.packageId,\n          },\n        },\n        create: {\n          packageId: sub.packageId,\n          percentSavingsText: valueExistsOrNull(sub.percentSavingsText),\n          percentSavings: valueExistsOrNull(sub.percentSavings),\n          optionText: valueExistsOrNull(sub.optionText),\n          optionDescription: valueExistsOrNull(sub.optionDescription),\n          canGetFreeLicense: valueExistsOrNull(sub.canGetFreeLicense),\n          isFreeLicense: valueExistsOrNull(sub.isFreeLicense),\n          priceInCentsWithDiscount: valueExistsOrNull(sub.priceInCentsWithDiscount),\n        },\n      };\n    }),\n  } : undefined;\n}\n\nfunction connectOrCreateCategories(categories: PrismaSteamCategory[] | null | undefined) {\n  return categories ? {\n    connectOrCreate: categories.map((category) => {\n      return {\n        where: {\n          categoryId: category.categoryId,\n        },\n        create: {\n          categoryId: category.categoryId,\n          description: category.description,\n        },\n      };\n    }),\n  } : undefined;\n}\n\nfunction connectOrCreateGenres(genres: PrismaSteamGenre[] | null | undefined) {\n  return genres ? {\n    connectOrCreate: genres.map((genre) => {\n      return {\n        where: {\n          genreId: genre.genreId,\n        },\n        create: {\n          genreId: genre.genreId,\n          description: genre.description,\n        },\n      };\n    }),\n  } : undefined;\n}\n\nfunction connectOrCreateScreenshots(\n    steamAppId: number,\n    screenshots: PrismaSteamScreenshot[] | null | undefined,\n) {\n  return screenshots ? {\n    connectOrCreate: screenshots.map((screenshot) => {\n      return {\n        where: {\n          steamAppId_screenshotId: {\n            steamAppId,\n            screenshotId: screenshot.screenshotId,\n          },\n        },\n        create: {\n          screenshotId: screenshot.screenshotId,\n          pathThumbnail: valueExistsOrNull(screenshot.pathThumbnail),\n          pathFull: valueExistsOrNull(screenshot.pathFull),\n        },\n      };\n    }),\n  } : undefined;\n}\n\nfunction connectOrCreateMovies(\n    steamAppId: number,\n    movies: PrismaSteamMovie[] | null | undefined,\n) {\n  return movies ? {\n    connectOrCreate: movies.map((movie) => {\n      return {\n        where: {\n          steamAppId_movieId: {\n            steamAppId,\n            movieId: movie.movieId,\n          },\n        },\n        create: {\n          movieId: movie.movieId,\n          name: valueExistsOrNull(movie.name),\n          thumbnail: valueExistsOrNull(movie.thumbnail),\n          webmFourEighty: valueExistsOrNull(movie.webmFourEighty),\n          webmMax: valueExistsOrNull(movie.webmMax),\n          mp4FourEighty: valueExistsOrNull(movie.mp4FourEighty),\n          mp4Max: valueExistsOrNull(movie.mp4Max),\n          highlight: valueExistsOrNull(movie.highlight),\n        },\n      };\n    }),\n  } : undefined;\n}\n\nfunction connectOrCreateAchievements(\n    steamAppId: number,\n    achievements: PrismaSteamAchievement[] | null | undefined,\n) {\n  return achievements ? {\n    connectOrCreate: achievements.map((achievement) => {\n      return {\n        where: {\n          steamAppId_name: {\n            steamAppId,\n            name: achievement.name,\n          },\n        },\n        create: {\n          name: achievement.name,\n          path: valueExistsOrNull(achievement.path),\n          highlighted: valueExistsOrNull(achievement.highlighted),\n        },\n      };\n    }),\n  }: undefined;\n}\n","import type { Prisma, PrismaSteamApp } from '../interfaces';\nimport { prisma } from '../client';\n\nexport async function createPerformancePost({\n  steamUserId,\n  steamAppId,\n  postText,\n}: {\n  steamUserId: string;\n  steamAppId: number;\n  postText: string;\n}) {\n  return prisma.performancePost.create({\n    data: {\n      postText,\n      steamUserId,\n      steamAppId,\n    },\n  });\n};\n\nexport async function findPerformancePostsByAppId(\n    steamAppId: PrismaSteamApp['steamAppId'],\n    select?: Prisma.PerformancePostSelect,\n) {\n  return prisma.performancePost.findMany({\n    where: {\n      steamAppId,\n    },\n    select,\n  });\n}\n","import type { Prisma, PrismaSteamUser, PrismaSteamApp } from '../interfaces';\nimport { prisma } from '../client';\n\nexport async function findUserBySteamId(\n    steamUserId: PrismaSteamUser['steamUserId'],\n    select?: Prisma.SteamUserSelect,\n) {\n  return prisma.steamUser.findUnique({\n    where: { steamUserId },\n    select,\n  });\n}\n\nexport async function createSteamUser(\n    steamUser: PrismaSteamUser,\n    select?: Prisma.SteamUserSelect,\n) {\n  return prisma.steamUser.create({\n    data: {\n      ...steamUser,\n    },\n    select,\n  });\n}\n\nexport async function deleteUserBySteamId(\n    steamUserId: PrismaSteamUser['steamUserId'],\n    select?: Prisma.SteamUserSelect,\n) {\n  return prisma.steamUser.delete({\n    where: { steamUserId },\n    select,\n  });\n}\n\nexport async function updateUserOwnedApps(\n    steamAppIds: PrismaSteamApp['steamAppId'][],\n    steamUserId: PrismaSteamUser['steamUserId'],\n    select?: Prisma.SteamUserSelect,\n) {\n  return prisma.steamUser.update({\n    where: {\n      steamUserId,\n    },\n    data: {\n      ownedApps: {\n        connectOrCreate: steamAppIds.map((steamAppId) => ({\n          where: {\n            steamAppId,\n          },\n          create: {\n            steamAppId,\n            name: 'UNKNOWN_APP',\n          },\n        })),\n      },\n    },\n    select,\n  });\n}\n\nexport async function upsertSteamUser(\n    steamUser: PrismaSteamUser,\n    select?: Prisma.SteamUserSelect,\n) {\n  return prisma.steamUser.upsert({\n    where: {\n      steamUserId: steamUser.steamUserId,\n    },\n    create: {\n      ...steamUser,\n    },\n    update: {\n      ...steamUser,\n    },\n    select,\n  });\n}\n\n"],"mappings":"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","names":["import_client","valueExistsOrNull","logger"]}