// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

generator client {
  provider = "prisma-client-js"
}

//-----------------------------
// Models Specific to Steamed Apples Website
//-----------------------------
model UserProfile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userStats             UserStats?
  userSystemSpecs       UserSystemSpec[]
  likedPerformancePosts PerformancePostLike[]

  steamUserProfile SteamUserProfile?

  // Not optional for now, steam is the only way to login
  // as of now. Could be made optional later on if other
  // login methods are created
  steamUserId64 BigInt @unique
}

model UserSystemSpec {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfileId Int
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  performancePosts PerformancePost[]

  systemName         String // Unique constraint is [systemName, userProfileId]
  manufacturer       String?
  model              String?
  formFactor         String?
  cpuVendor          String?
  cpuBrand           String?
  cpuFamily          String?
  cpuModel           String?
  cpuStepping        String?
  cpuType            String?
  cpuSpeed           String?
  logicalProcessors  Int?
  physicalProcessors Int?
  osVersion          String?
  videoDriver        String?
  videoDriverVersion String?
  videoPrimaryVRAM   String?
  memoryRAM          String?

  @@unique([systemName, userProfileId])
}

model UserStats {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfileId Int         @unique
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  numLogins         Int @default(0)
  numPerfPosts      Int @default(0)
  numSystemsCreated Int @default(0)
}

model PerformancePostLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  performancePostId String
  performancePost   PerformancePost @relation(fields: [performancePostId], references: [id], onDelete: Cascade)
  userProfileId     Int
  userProfile       UserProfile     @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([userProfileId, performancePostId])
}

// Some fields in PerformancePost are marked not set as relation.
// This is to protect from if a user profile or system gets deleted
// the information is still available about who wrote the post and
// what system was used.
model PerformancePost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Steam Specific Data
  steamApp   SteamApp @relation(fields: [steamAppId], references: [steamAppId], onDelete: Cascade)
  steamAppId Int

  // TODO: this should eventually be a relation
  steamUserId64 BigInt // Not set as relation, used to verify who wrote post
  avatarMedium  String? // Not set as relation
  displayName   String? // Not set as relation

  postText          String
  ratingMedal       RatingMedal
  frameRateAverage  FrameRate?
  frameRateStutters Boolean     @default(false)

  userSystemSpecId Int?
  userSystemSpec   UserSystemSpec? @relation(fields: [userSystemSpecId], references: [id], onDelete: SetNull)

  // system... Not set as relation
  systemManufacturer       String?
  systemModel              String?
  systemOsVersion          String?
  systemCpuBrand           String?
  systemVideoDriver        String?
  systemVideoDriverVersion String?
  systemVideoPrimaryVRAM   String?
  systemMemoryRAM          String?

  postTags        PerformancePostTag[]
  gamepadId       Int?
  gamepadMetadata GamepadMetadata?      @relation(fields: [gamepadId], references: [id], onDelete: SetNull)
  gamepadRating   GamepadRating?
  usersWhoLiked   PerformancePostLike[]
}

model PerformancePostTag {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String

  performancePosts PerformancePost[]
}

// Named GamepadMetadata so as not to confuse with built in
// typescript type Gamepad
model GamepadMetadata {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  manufacturer String
  model        String
  description  String

  performancePosts PerformancePost[]

  @@unique([manufacturer, model])
}

enum RatingMedal {
  Borked
  Bronze
  Silver
  Gold
  Platinum
}

enum FrameRate {
  VeryLow
  Low
  Medium
  High
  VeryHigh
}

enum GamepadRating {
  GamepadBorked
  GamepadBronze
  GamepadSilver
  GamepadGold
  GamepadPlatinum
}

//-----------------------------
// Models where data is obtained from Steam API
//-----------------------------
model SteamUserProfile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  steamUserId64            BigInt  @unique
  displayName              String?
  communityVisibilityState Int?
  profileState             Int?
  personaName              String?
  commentPermission        Int?
  profileUrl               String?
  avatar                   String?
  avatarMedium             String?
  avatarFull               String?
  avatarHash               String?
  lastLogoff               Int?
  personaState             Int?
  realName                 String?
  primaryClanId            String?
  timeCreated              Int?
  personaStateFlags        Int?
  locCountryCode           String?
  locStateCode             String?
  locCityId                Int?

  ownedSteamApps SteamApp[]
  appCount       Int?

  userProfileId Int?         @unique
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
}

model SteamApp {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  steamAppId              Int       @unique
  name                    String
  dataDownloadAttempted   Boolean   @default(false)
  dataDownloadAttemptedAt DateTime?
  dataDownloaded          Boolean   @default(false)
  dataDownloadedAt        DateTime?

  type                         String?
  requiredAge                  String?
  isFree                       Boolean?
  controllerSupport            String?
  dlc                          Int[]
  detailedDescription          String?
  aboutTheGame                 String?
  shortDescription             String?
  supportedLanguages           String?
  reviews                      String?
  headerImage                  String?
  website                      String?
  pcRequirementsMinimum        String?
  pcRequirementsRecommended    String?
  macRequirementsMinimum       String?
  macRequirementsRecommended   String?
  linuxRequirementsMinimum     String?
  linuxRequirementsRecommended String?
  legalNotice                  String?
  developers                   String[]
  publishers                   String[]
  platformWindows              Boolean?
  platformMac                  Boolean?
  platformLinux                Boolean?
  metacriticScore              Int?
  metacriticUrl                String?
  categories                   SteamCategory[]
  genres                       SteamGenre[]
  recommendationsTotal         Int?
  achievementsTotal            Int?
  comingSoon                   Boolean?
  releaseDate                  String?
  supportUrl                   String?
  supportEmail                 String?
  background                   String?
  backgroundRaw                String?
  contentDescriptorIds         Int[]
  contentDescriptorNotes       String?

  performancePosts PerformancePost[]
  usersWhoOwnApp   SteamUserProfile[]

  @@unique([steamAppId, name])
}

// id is obtained from Steam API categoryId
// which returns an Int
model SteamCategory {
  // id        Int      @id @default(autoincrement())
  id        Int      @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // categoryId  Int        @unique
  description String
  steamApps   SteamApp[]
}

// id is obtained from Steam API genreId
// which returns an String
model SteamGenre {
  // id        Int      @id @default(autoincrement())
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // genreId     String     @unique
  description String
  steamApps   SteamApp[]
}
