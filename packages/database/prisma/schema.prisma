// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// TODO: rename models to Steam<ModelName> e.g. PerformancePost and PostTag
datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model SteamUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  steamUserId              String  @unique
  displayName              String?
  communityVisibilityState Int?
  profileState             Int?
  personaName              String?
  commentPermission        Int?
  profileUrl               String?
  avatar                   String?
  avatarMedium             String?
  avatarFull               String?
  avatarHash               String?
  lastLogoff               Int?
  personaState             Int?
  realName                 String?
  primaryClanId            String?
  timeCreated              Int?
  personaStateFlags        Int?
  locCountryCode           String?
  locStateCode             String?
  locCityId                Int?
  // photos?: {
  //   value: string;
  // }[];

  // TODO: Fix capitalization with safe copy migrate
  PerformancePosts PerformancePost[]
  gamepadPosts     SteamGamepadPost[]
  ownedApps        SteamApp[]
  systemSpecs      SteamUserSystemSpecs[]

  // Unused For Now
  appCount          Int?
  ownedAppsPlaytime SteamUserOwnedAppPlaytime[]
}

model SteamUserSystemSpecs {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unused For Now
  steamUserId String
  steamUser   SteamUser @relation(fields: [steamUserId], references: [steamUserId], onDelete: Cascade)

  systemName String

  manufacturer       String?
  model              String?
  formFactor         String?
  cpuVendor          String?
  cpuBrand           String?
  cpuFamily          String?
  cpuModel           String?
  cpuStepping        String?
  cpuType            String?
  cpuSpeed           String?
  logicalProcessors  Int?
  physicalProcessors Int?
  osVersion          String?
  videoDriver        String?
  videoDriverVersion String?
  videoPrimaryVRAM   String?
  memoryRAM          String?

  @@unique([systemName, steamUserId])
}

model SteamUserOwnedAppPlaytime {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  steamUserId String
  steamUser   SteamUser @relation(fields: [steamUserId], references: [steamUserId])

  steamAppId             Int
  playtimeTwoWeeks       Int
  playtimeForever        Int
  playtimeWindowsForever Int
  playtimeMacForever     Int
  playtimeLinuxForever   Int
  rTimeLastPlayed        Int
}

model SteamGamepadPost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  steamUser               SteamUser? @relation(fields: [steamUserIdForSteamUser], references: [steamUserId], onDelete: SetNull)
  steamUserIdForSteamUser String?

  steamApp   SteamApp @relation(fields: [steamAppId], references: [steamAppId], onDelete: Cascade)
  steamAppId Int

  steamUserId              String
  avatarMedium             String?
  displayName              String?
  postText                 String
  gamepad                  SteamGamepad @relation(fields: [gamepadId], references: [gamepadId])
  gamepadId                Int
  ratingMedal              RatingMedal
  systemManufacturer       String?
  systemModel              String?
  systemOsVersion          String?
  systemCpuBrand           String?
  systemVideoDriver        String?
  systemVideoDriverVersion String?
  systemVideoPrimaryVRAM   String?
  systemMemoryRAM          String?

  postTags PostTag[]
}

model SteamGamepad {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gamepadPosts SteamGamepadPost[]

  gamepadId    Int    @unique @default(autoincrement())
  manufacturer String
  model        String
  description  String

  @@unique([manufacturer, model])
}

model PerformancePost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  steamUser               SteamUser? @relation(fields: [steamUserIdForSteamUser], references: [steamUserId], onDelete: SetNull)
  steamUserIdForSteamUser String?

  steamApp   SteamApp @relation(fields: [steamAppId], references: [steamAppId], onDelete: Cascade)
  steamAppId Int

  steamUserId              String
  avatarMedium             String?
  displayName              String?
  postText                 String
  ratingMedal              RatingMedal
  frameRateAverage         FrameRate?
  frameRateStutters        Boolean?
  systemManufacturer       String?
  systemModel              String?
  systemOsVersion          String?
  systemCpuBrand           String?
  systemVideoDriver        String?
  systemVideoDriverVersion String?
  systemVideoPrimaryVRAM   String?
  systemMemoryRAM          String?

  postTags PostTag[]

  // TODO: Decide if we should use explicit vs. implicit
  // ! WITH JOIN TABLE
  // postTagsOnPerformancePosts PostTagsOnPerformancePosts[]
}

// TODO: Decide if we should use explicit vs. implicit
// ! WITH JOIN TABLE
// model PostTagsOnPerformancePosts {
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   performancePostId String
//   performancePost   PerformancePost @relation(fields: [performancePostId], references: [id], onDelete: Cascade)

//   postTagId Int
//   postTag   PostTag @relation(fields: [postTagId], references: [postTagId], onDelete: Cascade)
//   @@id([performancePostId, postTagId])
// }

model PostTag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  performancePosts PerformancePost[]
  gamepadPosts     SteamGamepadPost[]
  // TODO: Decide if we should use explicit vs. implicit
  // ! WITH JOIN TABLE
  // performancePostOnPostTag PostTagsOnPerformancePosts[]

  postTagId   Int    @unique @default(autoincrement())
  description String
}

enum FrameRate {
  VeryLow
  Low
  Medium
  High
  VeryHigh
}

enum RatingMedal {
  Borked
  Bronze
  Silver
  Gold
  Platinum
}

model SteamApp {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                    String
  steamAppId              Int       @unique
  dataDownloadAttempted   Boolean   @default(false)
  dataDownloadAttemptedAt DateTime?
  dataDownloaded          Boolean   @default(false)
  dataDownloadedAt        DateTime?

  type                         String?
  requiredAge                  String?
  isFree                       Boolean?
  controllerSupport            String?
  dlc                          Int[]
  detailedDescription          String?
  aboutTheGame                 String?
  shortDescription             String?
  supportedLanguages           String?
  reviews                      String?
  headerImage                  String?
  website                      String?
  pcRequirementsMinimum        String?
  pcRequirementsRecommended    String?
  macRequirementsMinimum       String?
  macRequirementsRecommended   String?
  linuxRequirementsMinimum     String?
  linuxRequirementsRecommended String?
  legalNotice                  String?
  developers                   String[]
  publishers                   String[]
  demos                        SteamDemo[]
  priceOverview                SteamPriceOverview?
  packages                     Int[]
  packageGroups                SteamPackageGroup[]
  platformWindows              Boolean?
  platformMac                  Boolean?
  platformLinux                Boolean?
  metacriticScore              Int?
  metacriticUrl                String?
  categories                   SteamCategory[]
  genres                       SteamGenre[]
  screenshots                  SteamScreenshot[]
  movies                       SteamMovie[]
  recommendationsTotal         Int?
  achievementsTotal            Int?
  achievements                 SteamAchievement[]
  comingSoon                   Boolean?
  releaseDate                  String?
  supportUrl                   String?
  supportEmail                 String?
  background                   String?
  backgroundRaw                String?
  contentDescriptorIds         Int[]
  contentDescriptorNotes       String?

  performancePosts PerformancePost[]
  gamepadPosts     SteamGamepadPost[]

  // Unused For Now
  usersWhoOwnApp SteamUser[]

  @@unique([steamAppId, name])
}

model SteamDemo {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  steamApp  SteamApp @relation(fields: [steamAppId], references: [steamAppId], onDelete: Cascade)

  steamAppId Int

  demoAppId   Int
  description String?

  @@unique([steamAppId, demoAppId])
}

model SteamPriceOverview {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  steamApp  SteamApp @relation(fields: [steamAppId], references: [steamAppId], onDelete: Cascade)

  steamAppId Int @unique

  currency         String?
  initial          Int?
  final            Int?
  discountPercent  Int?
  initialFormatted String?
  finalFormatted   String?
}

model SteamPackageGroup {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  steamApp  SteamApp @relation(fields: [steamAppId], references: [steamAppId], onDelete: Cascade)

  steamAppId Int

  name                    String
  title                   String?
  description             String?
  selectionText           String?
  saveText                String?
  displayType             String?
  isRecurringSubscription String?
  subs                    SteamPackageGroupSub[]

  @@unique([steamAppId, name])
}

model SteamPackageGroupSub {
  id                String            @id @default(cuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  steamPackageGroup SteamPackageGroup @relation(fields: [steamAppId, packageGroupName], references: [steamAppId, name], onDelete: Cascade)

  steamAppId       Int
  packageGroupName String

  packageId                Int
  percentSavingsText       String?
  percentSavings           Int?
  optionText               String?
  optionDescription        String?
  canGetFreeLicense        String?
  isFreeLicense            Boolean?
  priceInCentsWithDiscount Int?

  @@unique([steamAppId, packageGroupName, packageId])
}

model SteamCategory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  steamApps SteamApp[]

  categoryId  Int    @unique
  description String
}

// The steam api seems to always return categoryId as Int
// and genreId as String (strange).
model SteamGenre {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  steamApps SteamApp[]

  genreId     String @unique
  description String
}

model SteamScreenshot {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  steamApp  SteamApp @relation(fields: [steamAppId], references: [steamAppId], onDelete: Cascade)

  steamAppId Int

  screenshotId  Int
  pathThumbnail String?
  pathFull      String?

  @@unique([steamAppId, screenshotId])
}

model SteamMovie {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  steamApp  SteamApp @relation(fields: [steamAppId], references: [steamAppId], onDelete: Cascade)

  steamAppId Int

  movieId        Int
  name           String?
  thumbnail      String?
  webmFourEighty String?
  webmMax        String?
  mp4FourEighty  String?
  mp4Max         String?
  highlight      Boolean?

  @@unique([steamAppId, movieId])
}

model SteamAchievement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  steamApp  SteamApp @relation(fields: [steamAppId], references: [steamAppId], onDelete: Cascade)

  steamAppId Int

  name        String
  path        String?
  highlighted Boolean?

  @@unique([steamAppId, name])
}
